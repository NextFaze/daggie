apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.nextfaze.daggie.sample'
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        // Dev proxy settings
        buildConfigField('String', 'DEV_PROXY_HOST', "\"${getStringProperty('androidDevProxyHost', '')}\"")
        buildConfigField('int', 'DEV_PROXY_PORT', "${getIntegerProperty('androidDevProxyPort', 0)}")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        disable 'AllowBackup', 'UnusedResources', 'GoogleAppIndexingWarning'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':daggie')
    compile project(':daggie-slf4j')
    compile project(':daggie-logback')
    compile project(':daggie-rxjava')
    compile project(':daggie-manup')
    compile project(':daggie-foreground')
    compile project(':daggie-okhttp')
    compile project(':daggie-threeten')
    compile project(':daggie-jodatime')
    compile project(':daggie-glide')
    compile project(':daggie-gson')
    debugCompile project(':daggie-leakcanary')
    debugCompile project(':daggie-stetho')
    debugCompile project(':daggie-devproxy')
    compile rootProject.ext.supportAppCompat

    // Dagger
    kapt rootProject.ext.daggerCompiler
    compile rootProject.ext.dagger
    compile rootProject.ext.daggerAnnotations
    compile rootProject.ext.okhttp

    // RxLifecycle
    def rxLifecycleVersion = '1.0'
    compile "com.trello:rxlifecycle:$rxLifecycleVersion"
    compile "com.trello:rxlifecycle-kotlin:$rxLifecycleVersion"
    compile "com.trello:rxlifecycle-components:$rxLifecycleVersion"

    // Conductor
    compile 'com.bluelinelabs:conductor:2.1.3'
    compile 'com.bluelinelabs:conductor-rxlifecycle:2.1.3'

    // JUnit
    testCompile rootProject.ext.junit
}

def getStringProperty(String name, String defaultValue) {
    return hasProperty(name) ? project.properties[name].toString() : defaultValue
}

def getBoolProperty(String name, boolean defaultValue) {
    return new Boolean(hasProperty(name) ? project.properties[name].toBoolean() : defaultValue)
}

def getIntegerProperty(String name, int defaultValue) {
    return hasProperty(name) ? project.properties[name].toInteger() : defaultValue
}